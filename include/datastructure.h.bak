#ifndef __RM_MALLOC_DATASTRUCTURE_H
#define __RM_MALLOC_DATASTRUCTURE_H

#include <stddef.h>
#include <inttypes.h>
#include <pthread.h>
#include "mempool.h"

/*
Content is 64 bits storing the following information
[8-bit 0s][1-bit RB tree color][7-bit node index][48-bit value(payload address)]
*/
typedef uint64_t Content;

#define COLOR_MASK  0x0080000000000000
#define INDEX_MASK  0x007f000000000000
#define VALUE_MASK  0x0000ffffffffffff

#define COLOR_RED   0
#define COLOR_BLACK 1

typedef struct _node{
    Content content;
    size_t size;
    struct _node *parent;
    struct _node *left;
    struct _node *right;
}Node;

inline int getContentColor(Content content){
    uint64_t content_int = (uint64_t)content;
    return (content_int&COLOR_MASK)>>55;
}
inline Content setContentColor(Content content, int color){
    uint64_t content_int = (uint64_t)content;
    return (Content)((content_int&~COLOR_MASK)|(color<<55));
}
inline int getContentIndex(Content content){
    uint64_t content_int = (uint64_t)content;
    return (content_int&INDEX_MASK)>>48;    
}
inline Content setContentIndex(Content content, int index){
    uint64_t content_int = (uint64_t)content;
    return (Content)((content_int&~INDEX_MASK)|(((uint64_t)index)<<48));
}
inline uint64_t *getContentValue(Content content){
    uint64_t content_int = content;
    return (uint64_t*)(content&VALUE_MASK);    
}
inline Content setContentValue(Content content, uint64_t *value){
    uint64_t content_int = content;
    return (Content)((content_int&~VALUE_MASK)|((uint64_t)value));
}
inline int getNodeColor(Node *node){return getContentColor(node->content);}
inline void setNodeColor(Node *node, int color){
    node->content=setContentColor(node->content, color);}
inline int getNodeIndex(Node *node){return getContentIndex(node->content);}
inline void setNodeIndex(Node *node, int index){
    node->content=setContentIndex(node->content, index);}
inline uint64_t *getNodeValue(Node *node){return getContentValue(node->content);}
inline void setNodeValue(Node *node, uint64_t *value){
    node->content=setContentValue(node->content, value);}

typedef struct _treeSlot{
    struct _treeSlot *prev;
    struct _treeSlot *next;
    uint64_t bitMap[2];
    Node nodes[128];
}TreeSlot;

#define TREESLOT_NUM (META_SIZE/sizeof(TreeSlot))

/*Delete a Node from the tree, return the new root*/
Node *deleteNode(Node *node, Node *root);

/*Return a Node with sufficient block size*/
Node *searchNode(size_t size, Node *root);

/*Insert a Node into a tree, return the new root*/
Node *insertNode(Node *node, Node *root);

/*Resize a node with or without deleting and inserting it. The return value is 
NULL if newSize is greater than original, and a new Node if smaller*/
Node *resizeNode(Node *node, size_t newSize);

#endif